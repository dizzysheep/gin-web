// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"gin-web/app/handler"
	"gin-web/internal/dao"
	"gin-web/internal/dao/article"
	"gin-web/internal/dao/auth"
	"gin-web/internal/dao/tag"
	"gin-web/internal/service"
	article2 "gin-web/internal/service/article"
	auth2 "gin-web/internal/service/auth"
	tag2 "gin-web/internal/service/tag"
	"gin-web/pkg/boostrap"
)

// Injectors from wire.go:

func NewAppContainer() *AppContainer {
	db := boostrap.InitDBEngine()
	articleDao := article.NewArticleDao(db)
	authDao := auth.NewAuthDao(db)
	tagDao := tag.NewTagDao(db)
	daos := &dao.Daos{
		Article: articleDao,
		Auth:    authDao,
		Tag:     tagDao,
	}
	articleService := article2.NewArticleService(daos)
	tagService := tag2.NewTagService(daos)
	authService := auth2.NewAuthService(daos)
	services := &service.Services{
		Article: articleService,
		Tag:     tagService,
		Auth:    authService,
	}
	commonHandler := handler.NewCommonHandler(services)
	healthHandler := handler.NewHealthHandler()
	tagHandler := handler.NewTagHandler(services)
	authHandler := handler.NewAuthHandler(services)
	articleHandler := handler.NewArticleHandler(services)
	handlers := &handler.Handlers{
		Common:  commonHandler,
		Health:  healthHandler,
		Tag:     tagHandler,
		Auth:    authHandler,
		Article: articleHandler,
	}
	appContainer := &AppContainer{
		Handlers: handlers,
	}
	return appContainer
}

// wire.go:

type AppContainer struct {
	Handlers *handler.Handlers
}
